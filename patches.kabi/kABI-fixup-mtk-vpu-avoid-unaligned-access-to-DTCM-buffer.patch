From: Oliver Neukum <oneukum@suse.com>
Date: Mon, 6 Jul 2020 13:27:04 +0200
Subject: kABI fixup algif_skcipher - Cap recv SG list at ctx->used
Patch-mainline: Never, kABI fixup
References: git-fixes

Revert the gratitious changes to the function prototypes
and keep the real fix

Signed-off-by: Oliver Neukum <oneukum@suse.com>

(mkubecek) refresh after changes in patches.suse/media-mtk-vpu-avoid-unaligned-access-to-DTCM-buffer.patch
---
 drivers/media/platform/mtk-mdp/mtk_mdp_vpu.c    |  9 ++++-----
 drivers/media/platform/mtk-vcodec/vdec_vpu_if.c |  4 ++--
 drivers/media/platform/mtk-vcodec/vdec_vpu_if.h |  2 +-
 drivers/media/platform/mtk-vcodec/venc_vpu_if.c | 12 ++++++------
 drivers/media/platform/mtk-vpu/mtk_vpu.c        | 16 ++++++++--------
 drivers/media/platform/mtk-vpu/mtk_vpu.h        |  2 +-
 6 files changed, 22 insertions(+), 23 deletions(-)

--- a/drivers/media/platform/mtk-mdp/mtk_mdp_vpu.c
+++ b/drivers/media/platform/mtk-mdp/mtk_mdp_vpu.c
@@ -15,7 +15,7 @@ static inline struct mtk_mdp_ctx *vpu_to_ctx(struct mtk_mdp_vpu *vpu)
 	return container_of(vpu, struct mtk_mdp_ctx, vpu);
 }
 
-static void mtk_mdp_vpu_handle_init_ack(const struct mdp_ipi_comm_ack *msg)
+static void mtk_mdp_vpu_handle_init_ack(struct mdp_ipi_comm_ack *msg)
 {
 	struct mtk_mdp_vpu *vpu = (struct mtk_mdp_vpu *)
 					(unsigned long)msg->ap_inst;
@@ -26,11 +26,10 @@ static void mtk_mdp_vpu_handle_init_ack(const struct mdp_ipi_comm_ack *msg)
 	vpu->inst_addr = msg->vpu_inst_addr;
 }
 
-static void mtk_mdp_vpu_ipi_handler(const void *data, unsigned int len,
-				    void *priv)
+static void mtk_mdp_vpu_ipi_handler(void *data, unsigned int len, void *priv)
 {
-	const struct mdp_ipi_comm_ack *msg = data;
-	unsigned int msg_id = msg->msg_id;
+	unsigned int msg_id = *(unsigned int *)data;
+	struct mdp_ipi_comm_ack *msg = (struct mdp_ipi_comm_ack *)data;
 	struct mtk_mdp_vpu *vpu = (struct mtk_mdp_vpu *)
 					(unsigned long)msg->ap_inst;
 	struct mtk_mdp_ctx *ctx;
--- a/drivers/media/platform/mtk-vcodec/vdec_vpu_if.c
+++ b/drivers/media/platform/mtk-vcodec/vdec_vpu_if.c
@@ -9,7 +9,7 @@
 #include "vdec_ipi_msg.h"
 #include "vdec_vpu_if.h"
 
-static void handle_init_ack_msg(const struct vdec_vpu_ipi_init_ack *msg)
+static void handle_init_ack_msg(struct vdec_vpu_ipi_init_ack *msg)
 {
 	struct vdec_vpu_inst *vpu = (struct vdec_vpu_inst *)
 					(unsigned long)msg->ap_inst_addr;
@@ -28,7 +28,7 @@ static void handle_init_ack_msg(const struct vdec_vpu_ipi_init_ack *msg)
  * This function runs in interrupt context and it means there's an IPI MSG
  * from VPU.
  */
-void vpu_dec_ipi_handler(const void *data, unsigned int len, void *priv)
+void vpu_dec_ipi_handler(void *data, unsigned int len, void *priv)
 {
 	const struct vdec_vpu_ipi_ack *msg = data;
 	struct vdec_vpu_inst *vpu = (struct vdec_vpu_inst *)
--- a/drivers/media/platform/mtk-vcodec/vdec_vpu_if.h
+++ b/drivers/media/platform/mtk-vcodec/vdec_vpu_if.h
@@ -83,6 +83,6 @@ int vpu_dec_reset(struct vdec_vpu_inst *vpu);
  * @len : length of ipi message
  * @priv: callback private data which is passed by decoder when register.
  */
-void vpu_dec_ipi_handler(const void *data, unsigned int len, void *priv);
+void vpu_dec_ipi_handler(void *data, unsigned int len, void *priv);
 
 #endif
--- a/drivers/media/platform/mtk-vcodec/venc_vpu_if.c
+++ b/drivers/media/platform/mtk-vcodec/venc_vpu_if.c
@@ -8,26 +8,26 @@
 #include "venc_ipi_msg.h"
 #include "venc_vpu_if.h"
 
-static void handle_enc_init_msg(struct venc_vpu_inst *vpu, const void *data)
+static void handle_enc_init_msg(struct venc_vpu_inst *vpu, void *data)
 {
-	const struct venc_vpu_ipi_msg_init *msg = data;
+	struct venc_vpu_ipi_msg_init *msg = data;
 
 	vpu->inst_addr = msg->vpu_inst_addr;
 	vpu->vsi = vpu_mapping_dm_addr(vpu->dev, msg->vpu_inst_addr);
 }
 
-static void handle_enc_encode_msg(struct venc_vpu_inst *vpu, const void *data)
+static void handle_enc_encode_msg(struct venc_vpu_inst *vpu, void *data)
 {
-	const struct venc_vpu_ipi_msg_enc *msg = data;
+	struct venc_vpu_ipi_msg_enc *msg = data;
 
 	vpu->state = msg->state;
 	vpu->bs_size = msg->bs_size;
 	vpu->is_key_frm = msg->is_key_frm;
 }
 
-static void vpu_enc_ipi_handler(const void *data, unsigned int len, void *priv)
+static void vpu_enc_ipi_handler(void *data, unsigned int len, void *priv)
 {
-	const struct venc_vpu_ipi_msg_common *msg = data;
+	struct venc_vpu_ipi_msg_common *msg = data;
 	struct venc_vpu_inst *vpu =
 		(struct venc_vpu_inst *)(unsigned long)msg->venc_inst;
 
--- a/drivers/media/platform/mtk-vpu/mtk_vpu.c
+++ b/drivers/media/platform/mtk-vpu/mtk_vpu.c
@@ -203,8 +203,8 @@ struct mtk_vpu {
 	struct vpu_run run;
 	struct vpu_wdt wdt;
 	struct vpu_ipi_desc ipi_desc[IPI_MAX];
-	struct share_obj __iomem *recv_buf;
-	struct share_obj __iomem *send_buf;
+	struct share_obj *recv_buf;
+	struct share_obj *send_buf;
 	struct device *dev;
 	struct clk *clk;
 	bool fw_loaded;
@@ -292,7 +292,7 @@ int vpu_ipi_send(struct platform_device *pdev,
 		 unsigned int len)
 {
 	struct mtk_vpu *vpu = platform_get_drvdata(pdev);
-	struct share_obj __iomem *send_obj = vpu->send_buf;
+	struct share_obj *send_obj = vpu->send_buf;
 	unsigned long timeout;
 	int ret = 0;
 
@@ -325,7 +325,7 @@ int vpu_ipi_send(struct platform_device *pdev,
 		}
 	} while (vpu_cfg_readl(vpu, HOST_TO_VPU));
 
-	memcpy_toio(send_obj->share_buf, buf, len);
+	memcpy_toio((void *)send_obj->share_buf, buf, len);
 	writel(len, &send_obj->len);
 	writel(id, &send_obj->id);
 
@@ -600,10 +600,10 @@ int vpu_load_firmware(struct platform_device *pdev)
 }
 EXPORT_SYMBOL_GPL(vpu_load_firmware);
 
-static void vpu_init_ipi_handler(const void *data, unsigned int len, void *priv)
+static void vpu_init_ipi_handler(void *data, unsigned int len, void *priv)
 {
-	struct mtk_vpu *vpu = priv;
-	const struct vpu_run *run = data;
+	struct mtk_vpu *vpu = (struct mtk_vpu *)priv;
+	struct vpu_run *run = (struct vpu_run *)data;
 
 	vpu->run.signaled = run->signaled;
 	strscpy(vpu->run.fw_ver, run->fw_ver, sizeof(vpu->run.fw_ver));
@@ -724,7 +724,7 @@ static int vpu_ipi_init(struct mtk_vpu *vpu)
 	vpu_cfg_writel(vpu, 0x0, VPU_TO_HOST);
 
 	/* shared buffer initialization */
-	vpu->recv_buf = vpu->reg.tcm + VPU_DTCM_OFFSET;
+	vpu->recv_buf = (vpu->reg.tcm + VPU_DTCM_OFFSET);
 	vpu->send_buf = vpu->recv_buf + 1;
 	memset_io(vpu->recv_buf, 0, sizeof(struct share_obj));
 	memset_io(vpu->send_buf, 0, sizeof(struct share_obj));
--- a/drivers/media/platform/mtk-vpu/mtk_vpu.h
+++ b/drivers/media/platform/mtk-vpu/mtk_vpu.h
@@ -15,7 +15,7 @@
  * VPU interfaces with other blocks by share memory and interrupt.
  **/
 
-typedef void (*ipi_handler_t) (const void *data,
+typedef void (*ipi_handler_t) (void *data,
 			       unsigned int len,
 			       void *priv);
 
